<html>

  <head>
    <title>Assignment 3</title>
    <link href="shared/css/materialize.css" type="text/css" rel="stylesheet" media="screen,projection"/>
    <link href="shared/css/style.css" type="text/css" rel="stylesheet" media="screen,projection"/>
  </head>

  <body class="grey lighten-2">

    <div class="container center">
      <h3>COMP 466 - Advanced Technologies for Web-Based Systems</h3>
      <h4>Assignment 3</h4>
      <h5>Lorenzo Zafra - 3356915</h5>
      <h6><b>Date began:</b> April 3, 2018</h6>
      <h6><b>Date completed:</b> April 28, 2018</h6>
      <h6><b>Estimated hours spent:</b> 48 hours</h6>
    </div>

    <hr>
    <div class="row">
      <div class="col s12">
        <ul class="tabs">
          <li class="tab col s3"><a class="teal-text" href="#part1">Part 1</a></li>
          <li class="tab col s3"><a class="teal-text" href="#part2">Part 2</a></li>
          <li class="tab col s3"><a class="teal-text" href="#part3">Part 3</a></li>
          <li class="tab col s3"><a class="teal-text" href="#part4">Part 4</a></li>
        </ul>
      </div>
      <div id="part1" class="col s12 container">
        <h4>Part 1 - Cookie Tracker</h4>

        <h5 class="teal-text">Links</h5>
        <p>Live Server: <a href="#"><b>click here for part 1</b></a></p>

        <p>If the live server link does not work, the host may have gone down. Please contact me at
          <a href="mailto:zafra@ualberta.ca">zafra@ualberta.ca</a></p>

        <h5 class="teal-text">Description</h5>
        <p>
          Create a web application with ASP.NET in C# that uses a persistent cookie to track how many times a client computer has visited the page.
          In addition to the number of hits, the application also needs to display the IP address of the client computer and the
          time zone where the client computer is located.
        </p>

        <h5 class="teal-text">My interpretation</h5>
        <p>
          The goal for this part of the assignment is to crete an application which tracks information about the user accessing the website.
          Since we want to track the number of visits and their IP address, it is obvious that we should use persistent cookies to store the data
          on the client side. In this way, we can store data separately for each client. Also, we must show which timezone the user belongs in.
        </p>

        <h5 class="teal-text">Analysis and Design of the Web Application</h5>
        <p>
          The project was created using the Model-View-Controller design pattern. The <b>Model</b> represents the
          data that is to be displayed to the user. The <b>View</b> is the entity responsible for displaying the data
          to the user. The <b>Controller</b> is responsible for changing the model data.
          <br><br>
          I created a Model called UserInfo which tracks the number of visits, the IP address and the timezone of the user.

          In the controller, I read if there is an existing cookie, if so I take the value of the visit and increment.
          If there is no existing cookie, I create a cookie and add 1 visit. I then update the cookie by deleting the cookie
          and then appending a new one. After the Cookie has been updated, I update the Model's
          values (visits and IP Address). The timezone is calculated via a JavaScript.
          <br><br>

          The controller is called whenever the user refreshes the page. Loading a page creates a GET request to the controller's
          index method which contains the functionality I mentioned above.
        </p>

        <h5 class="teal-text">Documentation</h5>
        <p>
          Using Materialize CSS, we are able to create an aesthetically pleasing user interface.
          Also, every page has a navigation bar which links to the home page and other pages.
        </p>
        <br>

        <h6><b>Models</b></h6>
        <p>UserInfo.cs</p>
        <ul class="browser-default">
          <li>Holds information that is to be displayed to the user</li>
          <ul class="browser-default">
            <li>Visits: Integer</li>
            <li>IPAddr: String</li>
            <li>Timezone: String</li>
          </ul>
        </ul>
        <h6><b>Views</b></h6>
        <p>Index.cshtml</p>
        <ul class="browser-default">
          <li>A cshtml file which is responsible for displaying the Model's data</li>
          <li>Very similar to an html file except cshtml has the ability to get the Model's data directly</li>
        </ul>
        <h6><b>Controllers</b></h6>
        <p>HomeController.cs</p>
        <ul class="browser-default">
          <li>Responsible for responding to the GET request that is created when the user loads the page</li>
          <li>Checks if there is a cookie that exists, if so, update the visited value of the cookie</li>
          <li>If no cookie exists, create one and add 1 to the visited value</li>
          <li>Update all the Models value</li>
        </ul>
        <h6><b>Javascript</b></h6>
        <p>site.js</p>
        <ul class="browser-default">
          <li>Calculates the timezone of the client then updates the HTML element that displays the Timezone to the user</li>
        </ul>

        <h5 class="teal-text">Set up and running</h5>
        <p>
          To access welcome php, open 'welcome.php' path on your browser. For example, assuming you have already
          moved the 'TMA2' directory to the 'htdocs' folder, go to the URL: 'localhost/TMA2/part1/welcome.php'.
          Or <a href="part1/welcome.php"><b>click here to access part 1</b></a><br>
          <p>You may also access the live server linked <a href="http://zafracomp466.x10host.com/TMA2/part1/welcome.php"><b>here</b></a></p>
        </p>
      </div>

      <div id="part2" class="col s12 container">
        <h4>Part 2 - ASP.NET Slideshow</h4>
        <h5 class="teal-text">Links</h5>
        <p>Live Server: <a href="#"><b>click here for part 2</b></a></p>
        <p>If the live server link does not work, the host may have gone down. Please contact me at
          <a href="mailto:zafra@ualberta.ca">zafra@ualberta.ca</a></p>

        <h5 class="teal-text">Description</h5>
        <p>
          Develop a web application using ASP.NET in C# that runs a slideshow of a list of pictures. The requirements are as follows:
          <ol>
            <li>Information about the pictures must be stored on the server either in a database or in a text file. These details would include the name and location or URL of each picture and a description of the picture to be used as a caption, which must be stored in a plain text file or a database.</li>
            <li>The caption should be shown under each picture in the show.</li>
            <li>There should be a button to start/stop the show.</li>
            <li>There should be a control to toggle the show between random and sequential.</li>
            <li>There should be buttons to manually turn the show backward or forward, only if the show is in sequential mode.</li>
            <li>You may reuse the pictures you have used for assignment 1.</li>
            <li>The show should have at least 20 nice pictures.</li>
          </ol>
        </p>

        <h5 class="teal-text">My interpretation</h5>
        <p>
          The goal for this part of the assignment is similar to Assignment 1 Part 3 however, done using C#, ASP.NET Framework.
          The information about the images should be stored in a text file on the server and there should be buttons to control the
          slide show. These buttons include a Pause/Play button, a Forward/Backward button and a toggle between random or sequential
          order of images.
        </p>

        <h5 class="teal-text">Analysis and Design of the Web Application</h5>
        <p>
          The project was created using the Model-View-Controller design pattern. The <b>Model</b> represents the
          data that is to be displayed to the user. The <b>View</b> is the entity responsible for displaying the data
          to the user. The <b>Controller</b> is responsible for changing the model data.
          <br><br>

          The two models I created, myImage and Slideshow contains information about the images to be shown on the show.
          myImage is a class which has two attributes: URL and Caption. Slideshow has a list of the myImage class.
          <br>
          When the page is loaded, a GET request is sent to the controller. The controller then loads the text file and
          creates a Slideshow object. During the creation of the object, the model parses the text file and creates a list of
          myImages. The slideshow object is then returned with the View object.
          <br>
          The View has one Slideshow model. Using .cshtml functionality, I dynamically create the images for the carousel by
          looping through the list of myImages. The drawing of the image is handled by the Bootstrap CSS element.
          <br>
          The buttons are handled by Javascript event handlers. Each button has a handler which is described below.
          The random index, if selected, is calculated by obtaining a random value between 0 - 1 then multiplying by the
          length of the myImages list.
        </p>

        <h5 class="teal-text">Documentation</h5>
        <p>
          Using Materialize and Bootstrap CSS, we are able to create an aesthetically pleasing user interface.
          Also, every page has a navigation bar which links to the home page and other pages.
        </p>
        <br>

        <h6><b>Models</b></h6>
        <p>myImage.cs</p>
        <ul class="browser-default">
          <li>An object which holds the URL and Caption of the image</li>
          <ul class="browser-default">
            <li>Url: String</li>
            <li>Caption: String</li>
          </ul>
        </ul>
        <p>Slideshow.cs</p>
        <ul class="browser-default">
          <li>Contains a list of myImages. Used by the View to store the images</li>
          <ul class="browser-default">
            <li>MyImages: ArrayList<myImage></li>
          </ul>
          <li>Parses the text file containing the information about the Images and creates a list of myImages</li>
        </ul>
        <h6><b>Views</b></h6>
        <p>Index.cshtml</p>
        <ul class="browser-default">
          <li>A cshtml file which is responsible for displaying the Model's data</li>
          <li>Very similar to an html file except cshtml has the ability to get the Model's data directly</li>
          <li>Uses a Bootstrap CSS Carousel Element for the slideshow</li>
          <li>Contains buttons on the pictures for forward and backward</li>
          <li>Play button and a switch is created with Materialize CSS</li>
        </ul>
        <h6><b>Controllers</b></h6>
        <p>HomeController.cs</p>
        <ul class="browser-default">
          <li>Responsible for responding to the GET request that is created when the user loads the page</li>
          <li>Loads the text file that contains the image information</li>
          <li>Create a Slideshow object with said information</li>
          <li>Return the Index view to show the slideshow</li>
        </ul>
        <h6><b>Javascript</b></h6>
        <p>script.js</p>
        <ul class="browser-default">
          <li>Contains JavaScript listeners for the Play button and the Switch</li>
          <li>pauseplayListener()</li>
          <ul class="browser-default">
            <li>Toggles the 'paused' flag, pauses the carousel if paused is true</li>
          </ul>
          <li>switchListener()</li>
          <ul class="browser-default">
            <li>If Checked, then random is selected. Disable the forward and backward buttons then call random()</li>
            <li>If not Checked, enable the forward and backward button then call sequential()</li>
          </ul>
          <li>random()</li>
          <ul class="browser-default">
            <li>Pause the carousel then calculate the index for a random image</li>
            <li>Show the said random index on the carousel, set an interval to do it again until stopped</li>
            <li>Interval should have a flag to tell if random has been deselected. If so, clear the interval.</li>
          </ul>
          <li>sequential()</li>
          <ul class="browser-default">
            <li>enable the 'cycle' function of the carousel</li>
            <li>Set 'randflag' to true so that the random interval is cleared.</li>
          </ul>
        </ul>

        <h5 class="teal-text">Set up and running</h5>
        <p>
          To access the login screen, open 'welcome.php' path on your browser. For example, assuming you have already
          moved the 'TMA2' directory to the 'htdocs' folder, go to the URL: 'localhost/TMA2/part2/welcome.php'.
          Or <a href="part2/welcome.php"><b>click here to access part 1</b></a><br>

          <p>You may also access the live server linked <a href="http://zafracomp466.x10host.com/TMA2/part2/welcome.php"><b>here</b></a></p>
        </p>

        <h5 class="teal-text">Extra Information</h5>
        <p>
          Materialize CSS was used for this assignment. Also Bootstrap CSS was used. Bootstrap CSS is included
          in the ASP.NET MVC solution offered in Visual Studio. The base project contains a carousel that I used
          for reference.
        </p>
      </div>

      <div id="part3" class="col s12 container">
        <h4>Part 3 - Online Computer Store Part 1</h4>
        <h5 class="teal-text">Links</h5>
        <p>Live Server: <a href="#"><b>click here for part3</b></a></p>
        <p>If the live server link does not work, the host may have gone down. Please contact me at
          <a href="mailto:zafra@ualberta.ca">zafra@ualberta.ca</a></p>

        <h5 class="teal-text">Description</h5>
        <p>
          <ol>
          </ol>
        </p>

        <h5 class="teal-text">My interpretation</h5>
        <p>
        </p>

        <h5 class="teal-text">Analysis and Design of the Web Application</h5>
        <p>
          The project was created using the Model-View-Controller design pattern. The <b>Model</b> represents the
          data that is to be displayed to the user. The <b>View</b> is the entity responsible for displaying the data
          to the user. The <b>Controller</b> is responsible for changing the model data.
          <br><br>

        </p>

        <h5 class="teal-text">Documentation</h5>
        <br>

        <h6><b>Models</b></h6>
        <p>myImage.cs</p>
        <ul class="browser-default">
          <li>An object which holds the URL and Caption of the image</li>
          <ul class="browser-default">
            <li>Url: String</li>
            <li>Caption: String</li>
          </ul>
        </ul>
        <p>Slideshow.cs</p>
        <ul class="browser-default">
          <li>Contains a list of myImages. Used by the View to store the images</li>
          <ul class="browser-default">
            <li>MyImages: ArrayList<myImage></li>
          </ul>
          <li>Parses the text file containing the information about the Images and creates a list of myImages</li>
        </ul>
        <h6><b>Views</b></h6>
        <p>Index.cshtml</p>
        <ul class="browser-default">
          <li>A cshtml file which is responsible for displaying the Model's data</li>
          <li>Very similar to an html file except cshtml has the ability to get the Model's data directly</li>
          <li>Uses a Bootstrap CSS Carousel Element for the slideshow</li>
          <li>Contains buttons on the pictures for forward and backward</li>
          <li>Play button and a switch is created with Materialize CSS</li>
        </ul>
        <h6><b>Controllers</b></h6>
        <p>HomeController.cs</p>
        <ul class="browser-default">
          <li>Responsible for responding to the GET request that is created when the user loads the page</li>
          <li>Loads the text file that contains the image information</li>
          <li>Create a Slideshow object with said information</li>
          <li>Return the Index view to show the slideshow</li>
        </ul>
        <h6><b>Javascript</b></h6>
        <p>script.js</p>
        <ul class="browser-default">
          <li>Contains JavaScript listeners for the Play button and the Switch</li>
          <li>pauseplayListener()</li>
          <ul class="browser-default">
            <li>Toggles the 'paused' flag, pauses the carousel if paused is true</li>
          </ul>
          <li>switchListener()</li>
          <ul class="browser-default">
            <li>If Checked, then random is selected. Disable the forward and backward buttons then call random()</li>
            <li>If not Checked, enable the forward and backward button then call sequential()</li>
          </ul>
          <li>random()</li>
          <ul class="browser-default">
            <li>Pause the carousel then calculate the index for a random image</li>
            <li>Show the said random index on the carousel, set an interval to do it again until stopped</li>
            <li>Interval should have a flag to tell if random has been deselected. If so, clear the interval.</li>
          </ul>
          <li>sequential()</li>
          <ul class="browser-default">
            <li>enable the 'cycle' function of the carousel</li>
            <li>Set 'randflag' to true so that the random interval is cleared.</li>
          </ul>
        </ul>

        <h5 class="teal-text">Set up and running</h5>
        <p>
          To access the login screen, open 'welcome.php' path on your browser. For example, assuming you have already
          moved the 'TMA2' directory to the 'htdocs' folder, go to the URL: 'localhost/TMA2/part2/welcome.php'.
          Or <a href="part2/welcome.php"><b>click here to access part 1</b></a><br>

          <p>You may also access the live server linked <a href="http://zafracomp466.x10host.com/TMA2/part2/welcome.php"><b>here</b></a></p>
        </p>

        <h5 class="teal-text">Extra Information</h5>
        <p>
          Materialize CSS was used for this assignment. Also Bootstrap CSS was used. Bootstrap CSS is included
          in the ASP.NET MVC solution offered in Visual Studio. The base project contains a carousel that I used
          for reference.
        </p>
      </div>


    <script src="https://code.jquery.com/jquery-2.1.1.min.js"></script>
    <script src="shared/js/materialize.js"></script>
    <script src="shared/js/init.js"></script>
  </body>

</html>

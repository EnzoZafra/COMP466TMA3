<html>

  <head>
    <title>Assignment 3</title>
    <link href="shared/css/materialize.css" type="text/css" rel="stylesheet" media="screen,projection"/>
    <link href="shared/css/style.css" type="text/css" rel="stylesheet" media="screen,projection"/>
  </head>

  <body class="grey lighten-2">

    <div class="container center">
      <h3>COMP 466 - Advanced Technologies for Web-Based Systems</h3>
      <h4>Assignment 3</h4>
      <h5>Lorenzo Zafra - 3356915</h5>
      <h6><b>Date began:</b> April 3, 2018</h6>
      <h6><b>Date completed:</b> April x, 2018</h6>
      <h6><b>Estimated hours spent:</b> x hours</h6>
    </div>

    <hr>
    <div class="container">
      <h4>Part 1 - Cookie Tracker</h4>

      <h5 class="teal-text">Links</h5>
      <p>Local: <a href="#"><b>click here for part 1</b></a></p>
      <p>Live Server: <a href="#"><b>click here for part 1</b></a></p>

      <p>If the live server link does not work, the host may have gone down. Please contact me at
        <a href="mailto:zafra@ualberta.ca">zafra@ualberta.ca</a></p>

      <h5 class="teal-text">Description</h5>
      <p>
        Create a web application with ASP.NET in C# that uses a persistent cookie to track how many times a client computer has visited the page.
        In addition to the number of hits, the application also needs to display the IP address of the client computer and the
        time zone where the client computer is located.
      </p>

      <h5 class="teal-text">My interpretation</h5>
      <p>
        The goal for this part of the assignment is to crete an application which tracks information about the user accessing the website.
        Since we want to track the number of visits and their IP address, it is obvious that we should use persistent cookies to store the data
        on the client side. In this way, we can store data separately for each client. Also, we must show which timezone the user belongs in.
      </p>

      <h5 class="teal-text">Analysis and Design of the Web Application</h5>
      <p>
        The project was created using the Model-View-Controller design pattern. The <b>Model</b> represents the
        data that is to be displayed to the user. The <b>View</b> is the entity responsible for displaying the data
        to the user. The <b>Controller</b> is responsible for changing the model data.
        <br><br>
        I created a Model called UserInfo which tracks the number of visits, the IP address and the timezone of the user.

        In the controller, I read if there is an existing cookie, if so I take the value of the visit and increment.
        If there is no existing cookie, I create a cookie and add 1 visit. I then update the cookie by deleting the cookie
        and then appending a new one. After the Cookie has been updated, I update the Model's
        values (visits and IP Address). The timezone is calculated via a JavaScript.
        <br><br>

        The controller is called whenever the user refreshes the page. Loading a page creates a GET request to the controller's
        index method which contains the functionality I mentioned above.
      </p>

      <h5 class="teal-text">Documentation</h5>
      <p>
        Using Materialize CSS, we are able to create an aesthetically pleasing user interface.
        Also, every page has a navigation bar which links to the home page and other pages.
      </p>
      <br><br>

      <h6><b>Models</b></h6>
      <p>UserInfo.cs</p>
      <ul class="browser-default">
        <li>Holds information that is to be displayed to the user</li>
        <ul class="browser-default">
          <li>Visits: Integer</li>
          <li>IPAddr: String</li>
          <li>Timezone: String</li>
        </ul>
      </ul>
      <h6><b>Views</b></h6>
      <p>Index.cshtml</p>
      <ul class="browser-default">
        <li>A cshtml file which is responsible for displaying the Model's data</li>
        <li>Very similar to an html file except cshtml has the ability to get the Model's data directly</li>
      </ul>
      <h6><b>Controllers</b></h6>
      <p>HomeController.cs</p>
      <ul class="browser-default">
        <li>Responsible for responding to the GET request that is created when the user loads the page</li>
        <li>Checks if there is a cookie that exists, if so, update the visited value of the cookie</li>
        <li>If no cookie exists, create one and add 1 to the visited value</li>
        <li>Update all the Models value</li>
      </ul>
      <h6><b>Javascript</b></h6>
      <p>site.js</p>
      <ul class="browser-default">
        <li>Calculates the timezone of the client then updates the HTML element that displays the Timezone to the user</li>
      </ul>

      <h5 class="teal-text">Set up and running</h5>
      <p>
        To access welcome php, open 'welcome.php' path on your browser. For example, assuming you have already
        moved the 'TMA2' directory to the 'htdocs' folder, go to the URL: 'localhost/TMA2/part1/welcome.php'.
        Or <a href="part1/welcome.php"><b>click here to access part 1</b></a><br>
        <p>You may also access the live server linked <a href="http://zafracomp466.x10host.com/TMA2/part1/welcome.php"><b>here</b></a></p>
      </p>
    </div>

    <hr>
    <div class="container">
      <h4>Part 2 - Online Learning Management System</h4>
      <h5 class="teal-text">Links</h5>
      <p>Local: <a href="part2/welcome.php"><b>click here for part 2</b></a></p>
      <p>Live Server: <a href="http://zafracomp466.x10host.com/TMA2/part2/welcome.php"><b>click here for part 2</b></a></p>
      <p>If the live server link does not work, the host may have gone down. Please contact me at
        <a href="mailto:zafra@ualberta.ca">zafra@ualberta.ca</a></p>

      <h5 class="teal-text">Description</h5>
      <p>
        In this part of the assignment, you are required to develop a small-scale online learning management system that can be used to deliver online courses
        to learners. <br><br>
        To that end, you will have to think about what these online courses are, how they can they be developed and how they should be
        stored on the web server, how they can be retrieved from the server, how they should be delivered to a web browser, and then rendered/presented
        properly on the web browser. <br><br>
        The development of online courses is the collaboration of efforts of subject matter experts (SMEs) and experts in computing and web technology.
        It is very common that those SMEs do not know much about computing, and don't know how to use HTML and other web technologies needed to present an
        attractive course, but they should be quite comfortable with languages and terms used in education. So, the first technical step you need to take is to
        design a SME-friendly language for marking up educational materials, EML in our term (just another XML like you created for marking up your resume),
        for the SMEs to use. The EML you design may be a comprehensive one for marking up the contents for an entire course, or several languages in small scale
        for different components of a course. For example, you may have an EML for a lesson/lecture delivered in just a teaching/learning session, an EML for
        marking up quizzes, and an EML for marking up assignments, etc. You may look at some existing languages by searching for educational markup language in
        Google or other search engine. <br><br>

        After SMEs (for this assignment, you will be the SME) have written the course contents in your EML(s),
        the documents must be stored on the server before they can be delivered to the learners on the web.
        You may think that you can save each of the documents written in your EML as a file, like the resume file you wrote for assignment 1,
        but this is not practical. Files may work when there is just one or only a few learning documents, but when there are many,
        as happens in practical situations, the documents become unmanageable. That's why we need a database. <br><br>
        The next technical step is to design the database table or tables. Over the years, I have seen different designs from students in the course.
        The most simple and straightforward one is to have a single table. In the table each row contains information for a lesson or quiz,
        including the actual content written in your EML. To make the learning contents retrievable and manageable, you will need fields to identify
        the course and the unit the lesson or quiz belongs to. You may also keep the details of the courses and units in the same table for the
        purpose of this assignment project, though you wouldn't do that in practice because it is really inefficient; in a real world situation
        is to have separate tables to store information about courses and units. <br><br>
        To deliver the course contents (lessons and quizzes in our context), you will need to navigate through the database to
        find the right lesson or quiz that the learner has requested, and them retrieve the actual content in EML. For the content to be
        properly rendered or presented on learner's browser, you need to translate the content in your EML to HTML. We call this process parsing.
        Instead of using XSLT as you did for the first assignment, parsing EML to HTML needs to be done with PHP. So, the last important technical
        step for this project is to write a parser in PHP. <br><br>
      </p>

      <h5 class="teal-text">My interpretation</h5>
      <p>
        This assignment requires us to design an application for an online learning system from the ground up. This means designing the markup for the
        course contents, the parser for this markup language, the database schema for the application, the user-interface and the backend server. <br>
        We are to assume that the subject matter experts (SME)s do not know much about computing and HTML but they know how to use the markup language we design.
        Therefore, the course contents should be transformed from the mark up language to HTML for the students to view. <br><br>

        This transformation is done by a parser (RegEX implementation). The course contents are stored in the database so that it can be delivered to any
        learners on the web. Similar to assignment 1 part 2, there should be course content and a quiz at the end of each unit. The quiz should also be stored
        in a database.
      </p>

      <h5 class="teal-text">Analysis and Design of the Web Application</h5>
      <p> The design for login and registration of this web application is the same as in part 1 so it has been redacted here.</p>
      <p>
        When a user logs in, they are presented with the courses that they are registered in. If they are not registered, they are invited to
        open the 'Register' tab where they can see all the available courses that they can register to. <br>
        When they register to a course, they are redirected to the 'My Courses' page where they can view the and select a unit
        for the course. Both of these lists are created dynamically using PHP and MySQL queries. <br><br>

        When a user selects a unit, the client sends a POST request to a php script containing the unit id that is selected. This php script
        then queries the database for the topics that are related to the unit. The database returns the content in the Educational Markup Language (EML)
        that I designed which is describe more detailed below. <br><br>

        To transform the content, I parse the EML using PHP and PHP's regex library. The parser takes in the raw EML and returns an associative array containing the
        topic name, the subtopic header and the data for each subtopic. <br>
        When the user finishes reading the unit, they are met with a 'Take the quiz' button which similarly sends a POST request to another php script.
        The php script queries the database for the quiz contents which is stored in the EML form that is described below. Again, this EML is parsed using regex
        and is displayed to the user. <br><br>

        The parser returns an associative array which contains the type of the question (multiple choice, select all or true or false), the question itself,
        the possible choices, and the correct answer. Then, a JavaScript is used to create the quiz dynamically similar to my design in Assignment 1 Part 2. <br>
      </p>

      <h6><b>Dataflow</b></h6>
      <p>
        In general, the data moves in the following order:
        <br>User input -&gt; Client Scripts -&gt; POST request to PHP script -&gt; Database -&gt; Server (for Parser/Processing) -&gt; Back to client<br>

        All the data is stored in the database, therefore all the requests go to a MySQL database.
      </p>


      <h6><b>Important Modules</b></h6>
      <p>
        The 'helper' directory contains modules that interface the data of the webapplication to the client. The 'database.php' module is
        used as a wrapper to create MySQL queries and return objects. The 'parser.php' module is used to parse the content in EML to return an associative array. <br>
        <br>

        The 'server' directory contains PHP scripts that are accessed by POST requests. These scripts contains actions that allow the client to store or get information
        from the database. <br><br>

        The php files in the main directory contains the client code which is responsible for displaying the User Interface and creating elements dynamically. The client code
        is also responsible for creating forms that allow the client to talk to the server.
      </p>

      <h6><b>Educational Markup Language</b></h6>
      <b>Course Topics</b>
      <p>
        Each topic in the course is enclosed by a {subtopic} {/subtopic} tag. <br>
        Within a subtopic tag contains a header (enclosed by {header}) and its notes (enclosed by {notes}). <br>
        The notes section contains multiple child elements that is enclosed by {data}. These data elements holds the information for the subtopics.
        <br>
        For example:  <br>
        <img src="shared/img/emltopic.png" height="300" width="700">
      </p>
      <b>Quizzes</b>
      <p>
        Each question in the quiz is enclosed by a {question} tag. <br>
        Within the question tag contains the type of the queston, the prompt and the correct answer which are enclosed by {type}, {prompt}, and {answer} respectively. <br>
        For multiple choice, select and true or false questions, there is a {choices} tag which contains the possible choices for the question. <br>
        For example:  <br>
        <img src="shared/img/emlquiz.png" height="300" width="700">
      </p>

      <h6><b>Database Schema</b></h6>
      <img src="shared/img/dbschemapt2.png" height="400" width="800">
      <p>
        For the application, I created 7 tables.
        <ul class="browser-default">
          <li>users</li>
          <ul class="browser-default">
            <li>Table to hold the username and hashed passwords of learners</li>
          </ul>
          <li>courses</li>
          <ul class="browser-default">
            <li>Table to hold the courses for the system</li>
          </ul>
          <li>users_has_courses</li>
          <ul class="browser-default">
            <li>Table to represent many-to-many relationship between users and courses</li>
          </ul>
          <li>units</li>
          <ul class="browser-default">
            <li>Table to hold the units that belong to each course</li>
          </ul>
          <li>topics</li>
          <ul class="browser-default">
            <li>Table to hold the topics that belong to each unit</li>
          </ul>
          <li>media</li>
          <ul class="browser-default">
            <li>Table to hold images or videos</li>
            <li>Uses a BLOB class which is a bit representation of the image or video</li>
          </ul>
          <li>quizzes</li>
          <ul class="browser-default">
            <li>Table to hold information the content for the quizzes for each unit</li>
          </ul>
        </ul>
      </p>

      <h5 class="teal-text">Documentation</h5>
      <p>
        The functions used in this web application are the same functions used and documented for part 1 of this assignment.
        <h6><b>PHP files</b></h6>
        <p>registerpage.php</p>
        <ul class="browser-default">
          <li>A form where the user inputs a username and password</li>
          <li>Form creates a POST request and sends the username / password to `server/register.php`</li>
        </ul>
        <p>register.php</p>
        <ul class="browser-default">
          <li>PHP script which handles registring the user. Called by a POST request</li>
          <li>Retrieves username/password from the request, then hashes the password</li>
          <li>Checks first if username is taken. If not, insert the pair into the database</li>
          <li>If username is taken, redirect user back to register page with an error</li>
        </ul>
        <p>welcome.php</p>
        <ul class="browser-default">
          <li>Login form creates a POST request to 'server/login.php' on submit</li>
        </ul>
        <p>login.php</p>
        <ul class="browser-default">
          <li>Retrieves username/password from request</li>
          <li>Hash password and compare with the values in the database</li>
          <li>If compare is successful, set session variable to the username and redirect them to the main.php page</li>
          <li>If unsuccessful, redirect them back to the welcome.php page with an error</li>
        </ul>
        <p>main.php</p>
        <ul class="browser-default">
          <li>The main page for when the user is logged in</li>
          <li>Contains a navigation bar to MyCourses, Register and Logout</li>
          <li>This page lists the courses that the user is registered to in a dropdown</li>
          <li>When the dropdown is selected, a user is shown a list of units which links to the course content</li>
        </ul>
        <p>courses.php</p>
        <ul class="browser-default">
          <li>Page that shows all the courses that is available but the user has not registered for</li>
          <li>When a dropdown is selected, the user is shown the description of the course and a register button</li>
          <li>The button sends a POST request to 'registerclass.php' which inserts an entry in the users_has_courses table in the database</li>
        </ul>
        <p>loadtopic.php</p>
        <ul class="browser-default">
          <li>Page which displays the topics for the Unit selected by the user</li>
          <li>Makes an SQL query to the database for each topic and its contents</li>
          <li>The contents are parsed by my parser to obtain an associated list of the topics</li>
          <li>Dynamically creates HTML elements using the information in the list</li>
        </ul>
        <p>quiz.php</p>
        <ul class="browser-default">
          <li>Similar to loadtopic.php</li>
          <li>Displays the quiz for the selected topic</li>
          <li>Makes an SQL query, then send the content to the parser to create an array which is used to display quiz elements</li>
          <li>Uses 'js/quiz.js' to dynamically create HTML elements. This same JavaScript was what I used in Assignment 1 Part 2 with small edits.</li>
        </ul>
        <p>logout.php</p>
        <ul class="browser-default">
          <li>Called by the Logout button in the navigation bar whe logged in</li>
          <li>Deletes the session variables</li>
          <li>Redirect the user to the welcome.php page</li>
        </ul>
        <p>forbidden.php</p>
        <ul class="browser-default">
          <li>Users are redirected here when the users try to access the PHP server scripts without POST variables</li>
        </ul>
        <p>database.php</p>
        <ul class="browser-default">
          <li>Wrapper for creating MySQL requests easily</li>
          <li>A singleton class which has an instance of the database</li>
          <li>Contains the login info needed for database connection</li>
        </ul>
        <p>parser.php</p>
        <ul class="browser-default">
          <li>contains two functions used for parsing the course content from EML to an array</li>
          <li>parseContent() parses the EML for topics in the format described above</li>
          <li>parseQuiz() parses the EML for quizzes in the format described above</li>
        </ul>
      </p>

      <h5 class="teal-text">Set up and running</h5>
      <p>
        First, you need to have an apache and mysql stack running. This can be setup using XAMPP. I followed
        the tutorial found <a href="https://blog.udemy.com/xampp-tutorial/">here.</a>
        <br>
        Move or copy all the files from this directory (TMA2) to the XAMPP stack's 'htdocs' folder.
        <br>
        <b>IMPORTANT</b> <br>
        To initialize the database, login to your mysql shell using the root username and password.
        When logged in, source the sql file located in 'helper/initdb.sql' to initialize the tables and to
        load in the first set of data for the demo. <br>
        Create a user with the following credentials: username/pass = 'comp466admin'/'password'. This user
        needs to have 'GRANT ALL PRIVILEGES' to the database. <br>

        <br><br>

        To access the login screen, open 'welcome.php' path on your browser. For example, assuming you have already
        moved the 'TMA2' directory to the 'htdocs' folder, go to the URL: 'localhost/TMA2/part2/welcome.php'.
        Or <a href="part2/welcome.php"><b>click here to access part 1</b></a><br>

        <p>You may also access the live server linked <a href="http://zafracomp466.x10host.com/TMA2/part2/welcome.php"><b>here</b></a></p>
      </p>

      <h5 class="teal-text">Extra Information</h5>
      <p>
        The notes for each unit were from the given presentations for each unit (written by Pearson).
        Materialize CSS was used for this whole assignment as approved by Harris Wang.
      </p>
      <p>I used <a href="https://regex101.com">regex101.com</a> to help create regex patterns to parse my EML design</p>
      <p><a href="https://stackoverflow.com/questions/133925/javascript-post-request-like-a-form-submit">How to emulate a form submission using JS</a></p>
    </div>

    <script src="shared/js/materialize.js"></script>
    <script src="shared/js/init.js"></script>
  </body>

</html>
